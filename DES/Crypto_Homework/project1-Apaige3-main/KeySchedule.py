"""
Author: Put your name here
"""

class KeySchedule:
    PC_1 = [
        [57, 49, 41, 33, 25, 17, 9, 1],
        [58, 50, 42, 34, 26, 18, 10, 2],
        [59, 51, 43, 35, 27, 19, 11, 3],
        [60, 52, 44, 36, 63, 55, 47, 39],
        [31, 23, 15, 7, 62, 54, 46, 38],
        [30, 22, 14, 6, 61, 53, 45, 37],
        [29, 21, 13, 5, 28, 20, 12, 4]
    ]

    PC_2 = [
        [14, 17, 11, 24, 1, 5, 3, 28],
        [15, 6, 21, 10, 23, 19, 12, 4],
        [26, 8, 16, 7, 27, 20, 13, 2],
        [41, 52, 31, 37, 47, 55, 30, 40],
        [51, 45, 33, 48, 44, 49, 39, 56],
        [34, 53, 46, 42, 50, 36, 29, 32]
    ]


    @staticmethod
    def pc_1(key):
        """
        Permuted Choice - 1
        :param key: 64-bit initial key
        :return: 56-bit string to be fed to 16 rounds of transformation
        """
        output = ""
        key = list(key)
        for row in range(len(KeySchedule.PC_1)):
            for index in range(len(KeySchedule.PC_1[row])):
                value = KeySchedule.PC_1[row][index]
                output = output + str(key[value-1])
        return output


    @staticmethod
    def pc_2(inputString):
        """
        Permuted Choice - 2
        :param inputString: 56-bit string generated by a transform
        :return: 48-bit subkey
        """
        output = ""
        key = list(inputString)
        for row in range(len(KeySchedule.PC_2)):
            for index in range(8):
                value = KeySchedule.PC_2[row][index]
                output = output + str(key[value-1])

        return output

    @staticmethod
    def shiftLeft(half, offset):
        """
        :param half: a string of 28-bits
        :param offset: 1 or 2 positions to be shifted
        :return: shifted half by offset positions
        """
        assert (len(half) == 28)
        return half[offset:] + half[:offset]

    @staticmethod
    def shiftRight(half, offset):
        assert (len(half) == 28)
        return half[28 - offset:] + half[:28 - offset]

    @staticmethod
    def generateSubkeysForEncryption(key):
        """
        The key schedule for encryption generates 16 subkeys from main key
        :param key: main key of 64 bits
        :return: an array of 16 subkeys
        """
        subkeys = [""] * 16
        firstOutput = KeySchedule.pc_1(key)
        #Implement 16 rounds of transformation
        #In each round, two halves are left-shifted by one/two bits
        #and a subkey is generated.

        C = firstOutput[:28]
        D = firstOutput[28:]
        for round in range(1, 16 + 1):
            if round in [1, 2, 9, 16]:
                C = KeySchedule.shiftLeft(C, 2)
                D = KeySchedule.shiftLeft(D, 2)
            else:
                C = KeySchedule.shiftLeft(C, 1)
                D = KeySchedule.shiftLeft(D, 1)
            subkeys[round - 1] = KeySchedule.pc_2(C + D)
        #print(subkeys)
        return subkeys


    @staticmethod
    def generateSubkeysForDecryption(key):
        """
        The key schedule for encryption generates 16 subkeys from main key
        Do NOT call the generateSubkeysForEncryption method here
        :param key: main key of 64 bits
        :return: an array of 16 subkeys
        """
        subkeys = [""] * 16
        firstOutput = KeySchedule.pc_1(key)
        #Implement 16 rounds of transformation
        #In each round, two halves are left-shifted by one/two bits
        #and a subkey is generated.

        C = firstOutput[:28]
        D = firstOutput[28:]
        for round in range(1, 16 + 1):
            if round in [1, 2, 9, 16]:
                C = KeySchedule.shiftRight(C, 2)
                D = KeySchedule.shiftRight(D, 2)
            else:
                C = KeySchedule.shiftRight(C, 1)
                D = KeySchedule.shiftRight(D, 1)
            subkeys[round - 1] = KeySchedule.pc_2(C + D)
        #print(subkeys)
        return subkeys

